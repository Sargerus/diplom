@model IEnumerable<WebApplication1.Models.Backlog>

@{
    /**/

    ViewBag.Title = "Backlog";
}

@section  Body {

    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
    {
        @Html.AntiForgeryToken()
    }

    @foreach (var backlog in Model)
    {
        <div class="container-fluid main-backlog-div-pk" style="border: .1em solid #949392;border-radius:25px; margin-top:.5em;" main="x">
            <div style="font-size:120%; padding-top:1em;">@backlog.ProjectDescription</div>
            <table width="100%">
                <tr>
                    <td width="85%" @*style="border:2px solid black"*@>
                        <div class="backlog-left-item-pk" btype="@backlog.BacklogType" id="@backlog.BacklogId">
                            @Html.ActionLink(@backlog.BacklogDescription, "Details", new { @id = backlog.BacklogId }, new { @style = "color:black" })
                        </div>
                    </td>
                    <td width="15%">
                        <div class="backlog-right-item-pk" bstate="@backlog.BacklogState">

                            ляля
                        </div>
                    </td>
                </tr>
            </table>

            <div class="text-center">
                @{ string descriptionId = "#descof" + backlog.BacklogId.ToString(); }
                <a data-toggle="collapse" href="@descriptionId" aria-expanded="false" aria-controls="collapseExample">
                    Show description
                </a>

                @{ descriptionId = descriptionId.Substring(1, descriptionId.Length - 1); }
                <div class="collapse text-justify" style="word-wrap:break-word;margin-bottom:.6em;margin-top:.6em;" id="@descriptionId">
                    Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
                </div>

            </div>

            <div style="border: 1px dashed black; margin-top:1em; margin-bottom:1em;"  width="80%"></div>

            @{int counter = 0;}
            @foreach (var task in backlog.Tasks)
            {

                <div class="task-container-pk" style="margin:.2em;">
                    <div class="flex-item-big-abs-pk hover-element-pk" style="padding-left:.5em">
                        <img src="~/Content/Images/TaskDone.png" />
                        @Html.ActionLink(@task.Description, "Details", "BacklogTasks", new { @id = task.TaskId }, "")
                    </div>
                    <div class="flex-item-middle-pk div-text-center-pk hover-element-pk progress">
                        @{ MvcHtmlString x = Html.Action("CalculateTaskDoneFor", "BacklogTasks", new { @id = task.TaskId });}
                        @*<span class="progress-value">@((task.HoursDone.Equals(null)) ? "0" : task.HoursDone.ToString()) / @((task.HoursEstimated.Equals(null)) ? "0" : task.HoursEstimated.ToString())</span>*@
                        <div class="progress-bar progress-bar-striped bg-info" role="progressbar" style="width: @x%" aria-valuenow="@x" aria-valuemin="0" aria-valuemax="100"></div>
                        @*<small class="justify-content-center d-flex position-absolute w-100"></small>*@
                    </div>
                    <div class="flex-item-small-pk div-text-center-pk hover-element-pk">
                        @Html.ActionLink("Report", "Create", "Reports", new { @id = task.TaskId }, "")
                    </div>
                    <div class="hover-element-pk div-text-center-pk flex-item-small-pk">
                        @task.CreatedBy
                    </div>
                </div>
                                counter++;
                                if (counter == 3)
                                {
                                    counter = 0;
                                    break;
                                }
                            }

        </div>
    }

    <script type="text/javascript" src="~/Scripts/BacklogIndexBehaviour.js"></script>


    @*@foreach (var item in Model) lalst one
        {
            <table class="table">
        <tr>
            <td>
            @Html.ActionLink(@item.BacklogDescription, "Details", "Backlogs", new { @id = item.BacklogId }, null)
            </td>
            <td>
                @item.CreatedBy
            </td>
            <td>
                @item.BacklogState
            </td>
        </tr>
                <tr></tr>
                </table>

                if (item.Tasks != null)
                {
            <table class="table" style="font-size:12px; width:90%; margin-left:8%;">

                @foreach (var task in item.Tasks)
                {
                    <tr>
                        <td>
                            @Html.ActionLink(@task.Description, "Details", "BacklogTasks", new { @id = task.TaskId }, null)
                        </td>
                        <td>
                            @task.CreatedOn
                        </td>
                        <td>
                            @task.CreatedBy
                        </td>
                    </tr>
                }
                <tr>
                    <td></td>
                    <td></td>
                    <td style="text-align:right">
                        @Html.ActionLink("+Add Task", "Create", "BacklogTasks", new { @id = item.BacklogId }, null)
                    </td>
                </tr>
            </table>

                 }
         }*@

}

@section Additional {}