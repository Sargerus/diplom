@model WebApplication1.ViewModel.ProjectTasksDetailsViewModel

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Body{

    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
    {
        @Html.AntiForgeryToken()
    }

    <div class="btn-main-pk">
        <span class="glyphicon glyphicon-arrow-left"></span>
        @Html.ActionLink("Back to tasks", "Index", "ProjectTasks", new { projectid = Model.projectTask.ProjectKey, user = ViewBag.ViewedUser }, new { @class = "btn btn-success" })
    </div>


    <div class="main-backlog-div-pk">
        <div>
            <div class="project-label-pk">
                <span id="task_type"></span> @Html.DisplayFor(model => model.projectTask.ShortText)
            </div>
            <div class="btn-main-pk">
                @Html.ActionLink("Change", "Edit", new { @taskid = Model.projectTask.TaskKey, @projectid = Model.projectTask.ProjectKey }, new { @class = "btn btn-warning", @style = "border-radius:15px;" })
                @Html.ActionLink("Delete", "Delete", new { @taskid = Model.projectTask.TaskKey, @projectid = Model.projectTask.ProjectKey }, new { @class = "btn btn-danger", @style = "border-radius:15px;" })
            </div>
            <hr />
            <div class="task-container-pk">

                <div class="div-property">
                    <div class="property-header">
                        @Html.DisplayNameFor(model => Model.projectTask.AssignedBy)
                    </div>
                    <div class="property">
                        @Html.DisplayFor(model => Model.projectTask.AssignedBy)
                    </div>
                </div>

                <div class="div-property">
                    <div class="property-header">
                        @Html.DisplayNameFor(model => Model.projectTask.RequiredStartDate)
                    </div>
                    <div class="property">
                        @Html.DisplayFor(model => Model.projectTask.RequiredStartDate)
                    </div>
                </div>

                <div class="div-property">
                    <div class="property-header">
                        @Html.DisplayNameFor(model => Model.projectTask.RequiredEndDate)
                    </div>
                    <div class="property">
                        @Html.DisplayFor(model => Model.projectTask.RequiredEndDate)
                    </div>
                </div>
            </div>

            <div class="task-container-pk">

                <div class="div-property">
                    <div class="property-header">
                        @Html.DisplayNameFor(model => Model.projectTask.TaskEstimated)
                    </div>
                    <div class="property">
                        @Html.DisplayFor(model => Model.projectTask.TaskEstimated)
                    </div>
                </div>

                <div class="div-property">
                    <div class="property-header">
                        @Html.DisplayNameFor(model => Model.projectTask.TaskDone)
                    </div>
                    <div class="property">
                        @Html.DisplayFor(model => Model.projectTask.TaskDone)
                    </div>
                </div>

                <div class="div-property">
                    <div class="property-header">
                        @Html.DisplayNameFor(model => Model.projectTask.UserAssigned)
                    </div>
                    <div class="property">
                        @Html.DisplayFor(model => Model.projectTask.UserAssigned)
                    </div>
                </div>
            </div>
            @*<dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.RequiredStartDate)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RequiredEndDate)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.TaskEstimated)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.TaskDone)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.UserAssigned)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.AssignedBy)
            </dd>
        </dl>*@
        </div>

        <hr />

        <div class="text-center">
            <a data-toggle="collapse" href="#descriptionId" aria-expanded="false" aria-controls="collapseExample">
                Show description
            </a>

            <div class="collapse text-justify" style="word-wrap:break-word;margin-bottom:.6em;margin-top:.6em;" id="descriptionId">
                @Model.projectTask.Description
            </div>

        </div>

        <hr />

        <div class="reports-table-header-pk text-left">Reports</div>

        @*<div style="border: 1px dashed black; margin-top:1em; margin-bottom:1em;" width="80%"></div>*@

        <hr />

        <div class="task-div-pk">
            @if (Html.Action("CanReport", new { taskid = Model.projectTask.TaskKey, projectid = Model.projectTask.ProjectKey }).ToString().Equals("1"))
            {

                if (Model.projectTask.Reports != null)
                {
                    foreach (var report in Model.projectTask.Reports)
                    {
                        <div class="task-container-pk hover-element-pk report-div-pk">

                            <div class="flex-item-middle-pk">
                                @report.Comment
                            </div>
                            <div class="flex-item-small-pk">
                                @report.HoursReported
                            </div>
                            <div class="flex-item-small-pk">
                                @report.ReportedOn
                            </div>
                            <div class="flex-item-small-pk">
                                @Html.ActionLink("Change", "Edit", "Reports", new { @id = report.ReportId, @taskid = Model.projectTask.TaskKey, @projectid = Model.projectTask.ProjectKey }, new { @class = "btn btn-warning", @style = "border-radius:15px;" })
                                @Html.ActionLink("Delete", "Delete", "Reports", new { @id = report.ReportId, @taskid = Model.projectTask.TaskKey, @projectid = Model.projectTask.ProjectKey }, new { @class = "btn btn-danger", @style = "border-radius:15px;" })
                            </div>
                        </div>
                    }
                    <div class="modal fade" id="modalReportForm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
                         aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header text-center">
                                    <h4 class="modal-title w-100 font-weight-bold">Report document</h4>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body mx-3">
                                    <div class="md-form mb-4">
                                        <label data-error="wrong" data-success="right" for="defaultForm-date">Date</label>
                                        <input type="date" id="defaultForm-date" class="form-control validate">
                                    </div>

                                    <div class="md-form mb-4">
                                        <label data-error="wrong" data-success="right" for="defaultForm-hours">Time</label>
                                        <input type="number" min="0" max="8" id="defaultForm-time" class="form-control validate">
                                    </div>

                                    <div class="md-form mb-4">
                                        <label data-error="wrong" data-success="right" for="defaultForm-comment">Comment</label>
                                        <input type="text" id="defaultForm-comment" class="form-control validate">
                                    </div>

                                </div>
                                <div class="modal-footer d-flex justify-content-center">
                                    <button class="btn btn-default" onclick="Report();">Send</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="text-center">
                        <a href="" class="btn btn-default btn-rounded mb-4" data-toggle="modal" data-target="#modalReportForm">
                            New Report
                        </a>
                    </div>
                }
            }
            else
            {
                <text>You are not owner of this task</text>
            }
        </div>

        <hr />

        <div class="reports-table-header-pk text-left">Attachments</div>


        @foreach (var attach in Model.Attacments)
        {
            <div class="row">
                <div class="col-sm-4 hover-element-pk" style="font-size:110%;padding-left:.6em;padding-top:.2em;padding-bottom:.2em;">
                    @Html.ActionLink(attach.Description, "DownloadFile", new { attachid = attach.AttacmentId, projectid = attach.ProjectId, taskid = attach.TaskId })
                </div>
                <div class="col-sm-4 hover-element-pk">
                    @attach.CreatedBy
                </div>
                <div class="col-sm-4 hover-element-pk">
                    @attach.CreatedOn.ToString("MM/dd/yyyy")
                </div>
            </div>
        }

        <div class="text-center" style="margin-top:1.5em;">
            <a href="" class="btn btn-default btn-rounded mb-4" data-toggle="modal" data-target="#modalAttachForm">
                Attach document
            </a>
        </div>

        <div class="modal fade" id="modalAttachForm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
             aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header text-center">
                        <h4 class="modal-title w-100 font-weight-bold">Attach document</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body mx-3">
                        <div class="md-form mb-4">
                            <label data-error="wrong" data-success="right" for="defaultForm-date">File</label>
                            @*<form id="uploader">*@
                            <input id="fileInput" type="file" multiple>
                            @*</form>*@
                        </div>

                        @*<div class="md-form mb-4">
                            <label data-error="wrong" data-success="right" for="defaultForm-hours">Time</label>
                            <input type="number" min="0" max="8" id="defaultForm-time" class="form-control validate">
                        </div>

                        <div class="md-form mb-4">
                            <label data-error="wrong" data-success="right" for="defaultForm-comment">Comment</label>
                            <input type="text" id="defaultForm-comment" class="form-control validate">
                        </div>*@

                    </div>
                    <div class="modal-footer d-flex justify-content-center">
                        <button class="btn btn-default" onclick="Attach();">Attach</button>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <script type="text/javascript">

        function Attach() {
                        var formdata = new FormData(); //FormData object
            var fileInput = document.getElementById('fileInput');
            //Iterating through each files selected in fileInput
            for (i = 0; i < fileInput.files.length; i++) {
                //Appending each file to FormData object
                formdata.append(fileInput.files[i].name, fileInput.files[i]);
            }
            //Creating an XMLHttpRequest and sending
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/Attachments/Upload?projectid=' + @Model.projectTask.ProjectKey + "&taskid=" + @Model.projectTask.TaskKey);
            xhr.send(formdata);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    location.reload();
                }
            }
            return false;
        }
        @*document.getElementById('uploader').onsubmit = function () {
            var formdata = new FormData(); //FormData object
            var fileInput = document.getElementById('fileInput');
            //Iterating through each files selected in fileInput
            for (i = 0; i < fileInput.files.length; i++) {
                //Appending each file to FormData object
                formdata.append(fileInput.files[i].name, fileInput.files[i]);
            }
            //Creating an XMLHttpRequest and sending
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/Attachments/Upload?projectid=' + @Model.projectTask.ProjectKey + "&taskid=" + @Model.projectTask.TaskKey);
            xhr.send(formdata);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    location.reload();
                }
            }
            return false;
        }*@

    function Report() {

        var form = $('#__AjaxAntiForgeryForm');
        var token = $('input[name="__RequestVerificationToken"]', form).val();

        $.post(
            "/Reports/Create",
            {
                __RequestVerificationToken: token,
                ReportedBy: "@Html.Action("GetUser").ToString()",
                ReportedOn: document.getElementById("defaultForm-date").value,
                HoursReported: document.getElementById("defaultForm-time").value,
                Comment: document.getElementById("defaultForm-comment").value,
                TaskId: @Model.projectTask.TaskKey,
                ProjectId: @Model.projectTask.ProjectKey
                  },
            function (data) { },
            "json"
        )
            .fail(function () { document.location.reload(true); })
            .done(function () { document.location.reload(true); });

    }
    </script>
}


