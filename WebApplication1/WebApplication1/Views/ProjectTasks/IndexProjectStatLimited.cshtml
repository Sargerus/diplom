@model ICollection<WebApplication1.ViewModel.ProjectTaskViewModel>

@{
    ViewBag.Title = "IndexProjectStat";
    Layout = "~/Views/Shared/_LayoutTotalTasks.cshtml";
}

@section Body{
    <script type="text/javascript">
        $(function () { // will trigger when the document is ready
            $('.datepicker').datepicker(); //Initialise any date pickers
            $('.datepicker').keyup(function (e) {
                if (e.keyCode == 8 || e.keyCode == 46) {
                    $.datepicker._clearDate(this);
                }
                if ($(this).prop("id") == "end-date") {
                    $("#userstoassignndropdown").prop("disabled", true);
                }
            });
        })
    </script>
    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
    {
        @Html.AntiForgeryToken()
    }
    @{
        List<WebApplication1.ViewModel.ProjectTaskViewModel> doneTasks = new List<WebApplication1.ViewModel.ProjectTaskViewModel>();
        List<WebApplication1.ViewModel.ProjectTaskViewModel> processingTasks = new List<WebApplication1.ViewModel.ProjectTaskViewModel>();
        List<WebApplication1.ViewModel.ProjectTaskViewModel> outstandingTasks = new List<WebApplication1.ViewModel.ProjectTaskViewModel>();

        foreach (var g in Model)
        {
            if (g.colorIndicator.Equals("done-color"))
            {
                doneTasks.Add(g);
            }
            else if (g.colorIndicator.Equals("progress-color") || g.colorIndicator.Equals("havetime-color"))
            {
                processingTasks.Add(g);
            }
            else
            {
                outstandingTasks.Add(g);
            }
        }
    }

    @{ int doneTasksCount = 0;
        int totalDoneHours = 0;
        int totalRequiredDoneHours = 0;

        int processingTasksCount = 0;
        int totalprocessingHours = 0;
        int totalRequiredprocessingHours = 0;

        int outstandingTasksCount = 0;
        int totaloutstandingHours = 0;
        int totalRequiredoutstandingHours = 0;
    }

    <div class="text-left">
        @Html.ActionLink("Back to project", "Details", "Projects", new { @id = ViewBag.projectid }, new { @class = "btn btn-success", @style = "border-radius:15px;" })
    </div>
    <div class="project-label-pk row" style="margin-left:0; margin-right:0;">
        <div class="col-sm-6 col-md-6">
            Statistic
        </div>
    </div>

    <div class="row text-right" style="margin: 1.5em -.3em;padding-right:.9em;">
        <div class="input-group col-sm-3 text-right" style="float:left;padding-right:.5em">
            @if (Html.Action("AmILead", new { projectid = ViewBag.projectid }).ToString().Equals("1"))
            {
                @Html.DropDownList("UsersToAssign", null, htmlAttributes: new { @class = "form-control", id = "userssearch" })
            }
            else
            {
                @Html.DropDownList("UsersToAssign", null, htmlAttributes: new { @class = "form-control", id = "userssearch", disabled = "true" })
            }

        </div>
        <div class="input-group col-sm-3">
            <input class="form-control" id="searchtext" placeholder="Search by task name..." style="border-radius:15px 0 0 15px;">
            <span class="input-group-btn">
                <button class="btn btn-info" style="padding:9px 16px" id="searchbtn"><i class="fa fa-search"></i></button>
            </span>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-4">
            <div class="done-task-container">
                <div class="done-header text-center">Done</div>
                @foreach (var task in doneTasks)
                {
                    doneTasksCount += 1;
                    totalDoneHours += task.projectTask.TaskDone;
                    totalRequiredDoneHours += task.projectTask.TaskEstimated;
                    <div class="projecttask-line done-block">
                        @*<div class="col-sm-8" style="margin-left:-.3em;margin-right:-0.45em;">
                            @*<span class="@task.colorIndicator"></span>*@
                        <div style="padding-left:.2em;font-size:110%;">
                            @Html.ActionLink(@task.projectTask.ShortText, "Details", new { taskid = task.projectTask.TaskKey, projectid = task.projectTask.ProjectKey, taskofuser = task.projectTask.UserAssigned }, new { @target = "_blank" })<br />
                        </div>

                        <div class="hover-pointer" style="margin-left:.2em;margin-top:3em;font-size:85%;">
                            @if (Html.Action("AmILead", new { projectid = ViewBag.projectid }).ToString().Equals("1"))
                            {
                                <a style="color:black;" data-toggle="modal" data-target="#modalAssignForm" onclick="SaveTaskInfo(@task.projectTask.TaskKey, @task.projectTask.ProjectKey, '@task.projectTask.ShortText')">Assigned:</a>
                            }
                            else
                            {
                                @: Assigned
                            }
                            @Html.ActionLink(task.projectTask.UserAssigned, "Index", new { projectId = task.projectTask.ProjectKey, user = task.projectTask.UserAssigned }, new { style = "text-decoration:none;color:black;" })
                        </div>
                        <div class="row" style="font-size:85%;">

                            <div class="col-sm-8 text-left">
                                Required End Date: @task.projectTask.RequiredEndDate.Value.ToString("dd.MM.yyyy")
                            </div>
                            <div class="col-sm-4 text-right" style="padding-left:.1em;">
                                @task.projectTask.TaskDone / @task.projectTask.TaskEstimated h
                            </div>

                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="col-xs-4">
            <div class="progress-task-container">
                <div class="processing-header text-center">Processing</div>
                @foreach (var task in processingTasks)
                {
                    processingTasksCount += 1;
                    totalprocessingHours += task.projectTask.TaskDone;
                    totalRequiredprocessingHours += task.projectTask.TaskEstimated;
                    <div class="projecttask-line progress-block">
                        <div style="padding-left:.2em;font-size:110%;">
                            @Html.ActionLink(@task.projectTask.ShortText, "Details", new { taskid = task.projectTask.TaskKey, projectid = task.projectTask.ProjectKey, taskofuser = task.projectTask.UserAssigned }, new { @target = "_blank" })<br />
                        </div>

                        <div class="hover-pointer" style="margin-left:.2em;margin-top:3em;font-size:85%;">
                            @if (Html.Action("AmILead", new { projectid = ViewBag.projectid }).ToString().Equals("1"))
                            {
                                <a style="color:black;" data-toggle="modal" data-target="#modalAssignForm" onclick="SaveTaskInfo(@task.projectTask.TaskKey, @task.projectTask.ProjectKey, '@task.projectTask.ShortText')">Assigned:</a>
                            }
                            else
                            {
                                @: Assigned
                            }
                            @Html.ActionLink(task.projectTask.UserAssigned, "Index", new { projectId = task.projectTask.ProjectKey, user = task.projectTask.UserAssigned }, new { style = "text-decoration:none;color:black;" })
                        </div>
                        <div class="row" style="font-size:85%;">

                            <div class="col-sm-8 text-left">
                                Required End Date:
                                @if (task.projectTask.RequiredEndDate.HasValue)
                                {
                                    @task.projectTask.RequiredEndDate.Value.ToString("dd.MM.yyyy")
                                }
                            </div>
                            <div class="col-sm-4 text-right" style="padding-left:.1em;">
                                @task.projectTask.TaskDone / @task.projectTask.TaskEstimated h
                            </div>

                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-xs-4">
            <div class="outstanding-task-container">
                <div class="outstanding-header text-center">Outstanding</div>
                @foreach (var task in outstandingTasks)
                {
                    outstandingTasksCount += 1;
                    totaloutstandingHours += task.projectTask.TaskDone;
                    totalRequiredoutstandingHours += task.projectTask.TaskEstimated;
                    <div class="projecttask-line outstanding-block">
                        <div style="padding-left:.2em;font-size:110%;">
                            @Html.ActionLink(@task.projectTask.ShortText, "Details", new { taskid = task.projectTask.TaskKey, projectid = task.projectTask.ProjectKey, taskofuser = task.projectTask.UserAssigned }, new { @target = "_blank" })<br />
                        </div>

                        <div class="hover-pointer" style="margin-left:.2em;margin-top:3em;font-size:85%;">
                            @if (Html.Action("AmILead", new { projectid = ViewBag.projectid }).ToString().Equals("1"))
                            {
                                <a style="color:black;" data-toggle="modal" data-target="#modalAssignForm" onclick="SaveTaskInfo(@task.projectTask.TaskKey, @task.projectTask.ProjectKey, '@task.projectTask.ShortText')">Assigned:</a>
                            }
                            else
                            {
                                @: Assigned
                            }
                            @Html.ActionLink(task.projectTask.UserAssigned, "Index", new { projectId = task.projectTask.ProjectKey, user = task.projectTask.UserAssigned }, new { style = "text-decoration:none;color:black;" })
                        </div>
                        <div class="row" style="font-size:85%;">

                            <div class="col-sm-8 text-left">
                                Required End Date: @task.projectTask.RequiredEndDate.Value.ToString("dd.MM.yyyy")
                            </div>
                            <div class="col-sm-4 text-right" style="padding-left:.1em;">
                                @task.projectTask.TaskDone / @task.projectTask.TaskEstimated h
                            </div>

                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div data-toggle="modal" data-target="#modalCreateTaskForm" class="corner-button"><i class="fa fa-plus" style="font-weight:bold;"></i></div>

    <div class="modal fade" id="modalAssignForm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header text-center">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title w-100 font-weight-bold">Create new task</h4>
                </div>
                <div class="modal-body mx-3">

                    <div class="projecttask-line">
                        <label data-error="wrong" data-success="right">Choose user to assign<sup class="required">*</sup></label>
                        @Html.DropDownList("UsersToAssign", null, htmlAttributes: new { @class = "form-control", id = "userstoassigntaskdropdown" })
                    </div>

                    <div class="projecttask-line">
                        <label data-error="wrong" data-success="right">End Date<sup class="required">*</sup></label>
                        <input type="text" class="datepicker form-control" id="end-date-task-assign" />
                    </div>

                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button class="btn btn-default" onclick="AssignUser();">Assign</button>
                </div>

            </div>
        </div>
    </div>

    <div class="modal fade" id="modalCreateTaskForm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header text-center">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title w-100 font-weight-bold">Create new task</h4>
                </div>
                <div class="modal-body mx-3">

                    <div class="projecttask-line">
                        <div class="row">
                            <div class="col-sm-6">
                                <label data-error="wrong" data-success="right">Short text<sup class="required">*</sup></label>
                                <input type="text" id="short-text" class="form-control" placeholder="Short text..." />
                            </div>
                            <div class="col-sm-6">
                                <label data-error="wrong" data-success="right">Task Estimated<sup class="required">*</sup></label><br />
                                <input type="number" class="form-control" id="task-estimated" placeholder="8" />
                            </div>
                        </div>
                    </div>

                    <div class="projecttask-line">
                        <div class="row">
                            <div class="col-sm-6"><b>Start Date<sup class="required">*</sup></b> <input type="text" class="datepicker form-control" id="start-date" /></div>
                            <div class="col-sm-6"><b>End Date<sup class="required">*</sup></b><input type="text" class="datepicker form-control" id="end-date" /></div>
                        </div>
                    </div>

                    <div class="projecttask-line" style="margin-left:.3em;">
                        <label data-error="wrong" data-success="right">Description</label><br />
                        <textarea class="form-control" id="description" placeholder="Enter description"></textarea>
                    </div>

                    <div class="projecttask-line">
                        <label data-error="wrong" data-success="right">User Assigned (*Required End Date)</label>
                        @Html.DropDownList("UsersToAssign", null, htmlAttributes: new { @class = "form-control", id = "userstoassignndropdown", @disabled = "true" })
                    </div>

                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button class="btn btn-default" onclick="CreateTask();">Create</button>
                </div>

            </div>
        </div>
    </div>

    <script>

        $("#userssearch").val("@ViewBag.forUser");
        $("#searchtext").val("@ViewBag.search");
        $("#searchbtn").click(function () {
            GoToIndexProjectStatIndex();
        })


        $("#end-date").datepicker({
            onSelect: function (dateText, inst) {

                if ($("#userstoassignndropdown").prop("disabled") == true) {
                    $("#userstoassignndropdown").prop("disabled", false);
                }
            }
        });

        var taskidassign = "";
        var projectidassign = "";
        var shorttextassign = "";

        function SaveTaskInfo(taskid, projectid) {
            taskidassign = taskid;
            projectidassign = projectid;
        }

        function CreateTask() {
            var form = $('#__AjaxAntiForgeryForm');
            var token = $('input[name="__RequestVerificationToken"]', form).val();

            let task = {
                __RequestVerificationToken: token,
                ProjectKey: @ViewBag.projectid,
                ShortText: $("#short-text").val(),
                Description: $("#description").val(),
                RequiredStartDate: $("#start-date").val(),
                RequiredEndDate: $("#end-date").val(),
                TaskEstimated: $("#task-estimated").val(),
                UserAssigned: $("#userstoassignndropdown").children("option:selected").val(),
                AssignedBy: "@Utility.User",
            }
                $.post({
                    url: "/ProjectTasks/Create",
                    contentType: "application/json",
                    data: JSON.stringify(task),
                    success: function () { location.reload(); },
                    error: function (data) { location.reload(); },
                    dataType: "json"
                })
            @*$.post({
                url: "/Account/ReassignUser",
                data: { TeamLead: newteamlead, user: nameofusertoreassign, projectid: @Model.project.ProjectId },
                success: function () { location.reload(); },
                error: function (data) { alert("User" + data.User + "was not reassigned to new team lead. Please try again"); },
                dataType: "json"
            });*@
        }

        function AssignUser() {
            var form = $('#__AjaxAntiForgeryForm');
            var token = $('input[name="__RequestVerificationToken"]', form).val();

            tasktoassign = {
                __RequestVerificationToken: token,
                RequiredEndDate: $("#end-date-task-assign").val(),
                UserAssigned: $("#userstoassigntaskdropdown").children("option:selected").val(),
                TaskKey: taskidassign,
                ProjectKey: projectidassign,
                ShortText: shorttextassign
            }

            $.post({
                url: "/ProjectTasks/Reassign",
                contentType: "application/json",
                data: JSON.stringify(tasktoassign),
                success: function () { location.reload(); },
                error: function (data) { location.reload(); },
                dataType: "json"
            })
        }

                function MakeUrl() {

                    var url = "IndexProjectStat?projectId=" + "@ViewBag.ProjectId";;
                let searchtext = $("#searchtext").val();
                let userSelected = $("#userssearch").children("option:selected").val();

                if (searchtext != "")
                {
                    url += "&search=" + searchtext;
                }

                if (userSelected !== null) {
                        url += "&foruser=" + userSelected;
                }

                return url;
        }

        function GoToIndexProjectStatIndex() {
            window.location.replace(MakeUrl());
        }
    </script>
}
